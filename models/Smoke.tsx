/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 smoke.glb -t -r ./ 
*/

import * as THREE from 'three'
import React, { forwardRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    root001: THREE.Mesh
  }
  materials: {
    Material_89: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type EngineProps = JSX.IntrinsicElements['group'] & {
  scale: number;
  position: [number, number, number];
  rotation: [number, number, number];
  cond: boolean;
};


export const Smoke = forwardRef<Group, EngineProps>(({ scale, position, rotation, cond }, ref) => {
  const { nodes, materials } = useGLTF('models/smoke.glb') as GLTFResult;

  const whiteMaterial = new THREE.MeshBasicMaterial({ color: 'white', opacity: 0.2, transparent: true });


  return (
    <group visible={cond} ref={ref} rotation={rotation} scale={scale} position={position} dispose={null}>
      <mesh geometry={nodes.root001.geometry} material={whiteMaterial} position={[-2.606, 0, 0]} rotation={[-0.031, -0.18, 0.021]} scale={[10.312, 11.01, 3.877]} />
    </group>
  )
});

useGLTF.preload('models/smoke.glb')
