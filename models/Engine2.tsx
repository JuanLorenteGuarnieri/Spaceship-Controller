/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/engine2.glb -t -r public 
*/

import * as THREE from 'three'
import React, { useRef, forwardRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GroupProps } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Object_6: THREE.Mesh
    Object_4: THREE.Mesh
  }
  materials: {
    ['Plume2.003']: THREE.MeshStandardMaterial
    ['Plume1.003']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type EngineProps = JSX.IntrinsicElements['group'] & {
  // Aquí puedes añadir cualquier otra prop personalizada si es necesario
};


export const Engine2 = forwardRef<Group, EngineProps>((props, ref) => {
  const { nodes, materials } = useGLTF('models/engine2.glb') as GLTFResult
  const position: [number, number, number] = [0, 0, 0];
  const rotation: [number, number, number] = [0, 0, 0];
  const scale = 1;

  useEffect(() => {
    // Ajustar la saturación de los materiales
    Object.values(materials).forEach(material => {
      if (material.isMeshStandardMaterial) {
        const hsl = { h: 0, s: 0, l: 0 };
        material.color.getHSL(hsl);
        material.color.setHSL(hsl.h, 255, hsl.l); // Ajusta el segundo parámetro para cambiar la saturación
      }
    });

    // Código para reproducir la animación...
  }, [materials]);

  return (
    <group ref={ref} {...props} rotation={rotation} scale={scale} position={position} dispose={null}>
      <group rotation={[Math.PI / 2, 0, -0.15]}>
        <mesh geometry={nodes.Object_4.geometry} material={materials['Plume1.003']} />
        <mesh geometry={nodes.Object_6.geometry} material={materials['Plume2.003']} />
      </group>
    </group>
  )
});

useGLTF.preload('models/engine2.glb')
