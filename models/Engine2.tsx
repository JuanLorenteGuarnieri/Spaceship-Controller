/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/engine2.glb -t -r public 
*/

import * as THREE from 'three'
import React, { useRef, forwardRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GroupProps } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Object_6: THREE.Mesh
    Object_4: THREE.Mesh
  }
  materials: {
    ['Plume2.003']: THREE.MeshStandardMaterial
    ['Plume1.003']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type EngineProps = JSX.IntrinsicElements['group'] & {
  scale: number;
  position: [number, number, number];
  rotation: [number, number, number];
  isForward: boolean;
};


export const Engine2 = forwardRef<Group, EngineProps>(({ scale, position, rotation, isForward }, ref) => {
  const { nodes, materials } = useGLTF('models/engine2.glb') as GLTFResult


  const yellowMaterial = new THREE.MeshBasicMaterial({ color: 'yellow', opacity: 0.6, transparent: true });
  const redMaterial = new THREE.MeshBasicMaterial({ color: 'red', opacity: 0.2, transparent: true });


  return (
    <group visible={isForward} ref={ref} rotation={rotation} scale={scale} position={position} dispose={null}>
      <mesh geometry={nodes.Object_4.geometry} rotation={[Math.PI / 2, 0, -0.15]} material={redMaterial} />
      <mesh geometry={nodes.Object_6.geometry} rotation={[Math.PI / 2, 0, -0.15]} material={yellowMaterial} />
    </group>
  )
});

useGLTF.preload('models/engine2.glb')
