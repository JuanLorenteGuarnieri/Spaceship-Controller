/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 spaceship5.glb -t -r ./ 
*/

import * as THREE from 'three'
import React, { forwardRef, useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GroupProps } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';
import { Engine2 } from './Engine2'
import { Smoke } from './Smoke'


type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
    Cylinder002: THREE.Mesh
    Cylinder003: THREE.Mesh
    Cube003: THREE.Mesh
    Cylinder004: THREE.Mesh
    Cube001_RExtr001: THREE.Mesh
    Cube001_RPanel003: THREE.Mesh
    Cube001_RPanel003_RExtr: THREE.Mesh
    Cube002: THREE.Mesh
    Cube001_RPanel001: THREE.Mesh
    Cube001_RPanel003_RExtr001: THREE.Mesh
    Cube005: THREE.Mesh
    Sphere: THREE.Mesh
  }
  materials: {
    ['spaceship racer']: THREE.MeshStandardMaterial
    cockpit: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type SpaceShipProps = JSX.IntrinsicElements['group'] & {
  isForward: boolean;
  isLeft: boolean;
  isRight: boolean;
  isUp: boolean;
  isDown: boolean;
  isClockwise: boolean;
  isCounterClockwise: boolean;
};

export const SpaceShip = forwardRef<Group, SpaceShipProps>(({ isForward, isLeft, isRight, isUp, isDown, isClockwise, isCounterClockwise }, ref) => {
  const { nodes, materials } = useGLTF('models/spaceship.glb') as GLTFResult
  const position: [number, number, number] = [0, -3.15, 0.6];
  const rotation: [number, number, number] = [-0.1, -Math.PI, 0];
  const scale = 0.1;

  // Definir la variable que oscila entre 0 y 2*Math.PI
  const [oscillatingVariable, setOscillatingVariable] = useState(0);


  useEffect(() => {
    let frameId;

    const animate = () => {
      setOscillatingVariable(prev => (prev + 0.1) % (2 * Math.PI)); // Aumenta la variable y la mantiene en el rango [0, 2*Math.PI]
      frameId = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      cancelAnimationFrame(frameId); // Limpiar el animation frame al desmontar
    };
  }, []);

  return (
    <group ref={ref} scale={scale} dispose={null}>
      <Engine2 isForward={isForward} position={[-0.03, -3, 5]} scale={0.7} rotation={[Math.PI / 2, oscillatingVariable * 10, 0]} />

      <group scale={0.51} rotation={rotation} position={position} >
        <mesh geometry={nodes.Cube001.geometry} material={materials['spaceship racer']} position={[0.037, -0.648, -1.953]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cylinder002.geometry} material={materials['spaceship racer']} position={[0.042, -0.594, -8.134]} rotation={[-Math.PI, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cylinder003.geometry} material={materials['spaceship racer']} position={[0.066, -0.645, -7.69]} rotation={[-Math.PI, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube003.geometry} material={materials['spaceship racer']} position={[0.021, 0.468, -4.365]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cylinder004.geometry} material={materials['spaceship racer']} position={[0.54, 0.595, -4.85]} rotation={[2.574, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube001_RExtr001.geometry} material={materials['spaceship racer']} position={[0.1, 1.593, -2.66]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube001_RPanel003.geometry} material={materials['spaceship racer']} position={[0.037, 0, -2.601]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube001_RPanel003_RExtr.geometry} material={materials['spaceship racer']} position={[0.037, 0, -2.601]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube002.geometry} material={materials['spaceship racer']} position={[0.013, -2.671, -2.933]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube001_RPanel001.geometry} material={materials['spaceship racer']} position={[0.037, 0, -2.601]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube001_RPanel003_RExtr001.geometry} material={materials['spaceship racer']} position={[0.037, 0, -2.601]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Cube005.geometry} material={materials.cockpit} position={[0.039, 1.104, 0.471]} rotation={[1.658, 0, 0]} scale={0.01} />
        <mesh geometry={nodes.Sphere.geometry} material={materials.cockpit} position={[0.038, 1.457, 0.555]} rotation={[1.745, 0, 0]} scale={0.01} />
      </group>
      <Smoke cond={isDown || isCounterClockwise} position={[1.8, -4.5, 4.05]} scale={0.05} rotation={[0, oscillatingVariable * 6, -Math.PI / 2]} />
      <Smoke cond={isDown || isClockwise} position={[-1.8, -4.5, 4.05]} scale={0.05} rotation={[0, oscillatingVariable * 6, -Math.PI / 2]} />

      <Smoke cond={isUp || isCounterClockwise} position={[-1.85, -3, 3.85]} scale={0.05} rotation={[0, oscillatingVariable * 6, Math.PI / 2]} />
      <Smoke cond={isUp || isClockwise} position={[1.85, -3, 3.85]} scale={0.05} rotation={[0, oscillatingVariable * 6, Math.PI / 2]} />

      <Smoke cond={isRight} position={[-1.4, -3.75, 3.85]} scale={0.05} rotation={[oscillatingVariable * 6, 0, 0]} />
      <Smoke cond={isLeft} position={[1.4, -3.75, 3.85]} scale={0.05} rotation={[oscillatingVariable * 6, Math.PI, 0]} />

    </group>
  )
});

useGLTF.preload('models/spaceship.glb')
